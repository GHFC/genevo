# Declare the stages
stages:
  - lint
  - build
  - deploy

services:
  - registry-gitlab.pasteur.fr/dsi-tools/docker-images/docker:dind


# Lint the code but return only a warning
lint:
  stage: lint
  image: node:12.19
  allow_failure: true
  before_script:
    - npm ci
  script:
    - npm run lint

# Build the docker image and store it the gitlab registery
build:
  stage: build
  image: registry-gitlab.pasteur.fr/dsi-tools/docker-images/docker:latest
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker build -t "$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME/genevo:${CI_COMMIT_SHORT_SHA}" .
    - docker tag "$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME/genevo:${CI_COMMIT_SHORT_SHA}" "$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME/polls:latest"
    - docker push "$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME/genevo:${CI_COMMIT_SHORT_SHA}"


# Fetch the image of MongoDB from the DockerHub and store it if there is any changes
# This void issues with Docker in case of overpulling
fetch-mongo:
  stage: build
  image: registry-gitlab.pasteur.fr/dsi-tools/docker-images/docker:latest
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker pull mongo:4.0
    - docker tag mongo:4.0 "$CI_REGISTRY_IMAGE/mongo:4.0"
    - docker push "$CI_REGISTRY_IMAGE/mongo:4.0"


.deploy:
  stage: deploy
  image: registry-gitlab.pasteur.fr/dsi-tools/docker-images:docker_kubernetes_image
  script:
    - kubectl delete secret registry-gitlab -n ${NAMESPACE} --ignore-not-found=true
    - kubectl create secret docker-registry -n ${NAMESPACE} registry-gitlab --docker-server=registry-gitlab.pasteur.fr --docker-username=${DEPLOY_USER} --docker-password=${DEPLOY_TOKEN} --docker-email=kubernetes@pasteur.fr
    - envsubst < ./k8s/mongodb.yaml | kubectl apply -n ${NAMESPACE} -f -
    - kubectl wait --for=condition=available --timeout=600s deployment/mongodb
    - envsubst < ./k8s/genevo.yaml | kubectl apply -n ${NAMESPACE} -f -
    - kubectl patch deployment genevo -p "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"date\":\"`date +'%s'`\"}}}}}"

# Deploy on Kubernetes
deploy-dev:
  stage: deploy
  extends: .deploy
  variables:
    NAMESPACE: ${CI_PROJECT_NAME}-dev
    URL: genevo.dev.pasteur.cloud
    INGRESS_CLASS: internal
  environment:
    name: k8sdev-01-${CI_PROJECT_NAME}
    url: https://${CI_PROJECT_NAME}-dev.pasteur.cloud
  only:
    refs:
      - dev

deploy-prod:
  stage: deploy
  extends: .deploy
  variables:
    NAMESPACE: ${CI_PROJECT_NAME}-prod
    URL: genevo.pasteur.cloud
    INGRESS_CLASS: internal
  environment:
    name: k8sprod-02-${CI_PROJECT_NAME}
    url: https://${CI_PROJECT_NAME}.pasteur.cloud
  only:
    refs:
      - master
